mean.steps <- mean(raw.noNA$steps)
View(raw.noNA)
daily.total <- tapply(raw.noNA$steps, raw.noNA$date, sum)
table(daily.total)
raw.noNA$daily.total <- tapply(raw.noNA$steps, raw.noNA$date, sum)
daily.mean <- tapply(raw.noNA$steps, raw.noNA$date, mean)
daily.mean
daily.total.df <- data.frame(daily.total)
View(daily.total.df)
daily.mean.df <- data.frame(daily.mean)
View(daily.mean.df)
daily.median <- tapply(raw.noNA$steps, raw.noNA$date, median)
daily.median.df <- data.frame(daily.median)
View(daily.median.df)
daily.median <- tapply(raw.noNA$steps, raw.noNA$date, median)
daily.median
daily.mean <- tapply(raw.noNA$steps, raw.noNA$date, mean, na.rm=T)
daily.mean
funcs <-  c("mean", "sum", "median")
for (i in funcs) {
# daily.total <- tapply(raw.noNA$steps, raw.noNA$date, sum)
daily.[i] <- tapply(raw.noNA$steps, raw.noNA$date, [i], na.rm = T)
# daily.median <- tapply(raw.noNA$steps, raw.noNA$date, median)
# daily.total.df <- data.frame(daily.total)
daily.[i].df <- data.frame(daily.[i])
# daily.median.df <- data.frame(daily.median)
}
funcs <-  c("mean", "sum", "median")
for (i in funcs) {
# daily.total <- tapply(raw.noNA$steps, raw.noNA$date, sum)
daily.i <- tapply(raw.noNA$steps, raw.noNA$date, i, na.rm = T)
# daily.median <- tapply(raw.noNA$steps, raw.noNA$date, median)
# daily.total.df <- data.frame(daily.total)
daily.i.df <- data.frame(daily.i)
# daily.median.df <- data.frame(daily.median)
}
funcs <-  c(mean, sum, median)
for (i in funcs) {
# daily.total <- tapply(raw.noNA$steps, raw.noNA$date, sum)
daily.i <- tapply(raw.noNA$steps, raw.noNA$date, i, na.rm = T)
# daily.median <- tapply(raw.noNA$steps, raw.noNA$date, median)
# daily.total.df <- data.frame(daily.total)
daily.i.df <- data.frame(daily.i)
# daily.median.df <- data.frame(daily.median)
}
delete daily.mean
rm daily.mean
funcs <-  c(mean, sum, median)
for (i in funcs) {
# daily.total <- tapply(raw.noNA$steps, raw.noNA$date, sum)
paste("daily.", i) <- tapply(raw.noNA$steps, raw.noNA$date, i, na.rm = T)
# daily.median <- tapply(raw.noNA$steps, raw.noNA$date, median)
# daily.total.df <- data.frame(daily.total)
paste("daily.", i, ".df") <- data.frame(daily.i)
# daily.median.df <- data.frame(daily.median)
}
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
# daily.total <- tapply(raw.noNA$steps, raw.noNA$date, sum)
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , func[i], sep = ""), temp)
# daily.median <- tapply(raw.noNA$steps, raw.noNA$date, median)
# daily.total.df <- data.frame(daily.total)
# paste("daily.", i, ".df") <- data.frame(daily.i)
# daily.median.df <- data.frame(daily.median)
}
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
# daily.total <- tapply(raw.noNA$steps, raw.noNA$date, sum)
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
# daily.median <- tapply(raw.noNA$steps, raw.noNA$date, median)
# daily.total.df <- data.frame(daily.total)
# paste("daily.", i, ".df") <- data.frame(daily.i)
# daily.median.df <- data.frame(daily.median)
}
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
daily$func[i] <- temp
}
daily <- data.frame()
daily <- data.frame()
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
daily$func[i] <- temp
}
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
daily$func[i] <- data.frame(temp)
}
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
daily <- data.frame(func[i] = temp)
}
daily.total <- data.frame(daily.sum)
View(daily.total)
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram()
steps
steps <- ggplot(daily.total, aes(daily.sum), na.rm = T) +
geom_histogram()
steps
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(na.RM = T)
steps
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 100)
steps
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 50)
steps
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 50)
steps
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 10)
steps
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram()
steps
#a time
int.AVG <- tapply(raw.noNA$steps, raw.noNA$interval, mean)
avg.step <- tapply(raw.noNA$steps, raw.noNA$interval, mean)
interval <- data.frame(avg.step)
activityPattern <- ggplot(interval, aes(y = avg.step)) +
geom_line()
activityPattern
View(interval)
interval$fives <- rownames(interval)
activityPattern <- ggplot(interval, aes(y = avg.step, x = fives)) +
geom_line()
activityPattern
activityPattern <- qplot(fives, avg.step, data=interval, geom = "line")
activityPattern
activityPattern <- ggplot(data = interval, aes(x = fives, y = avg.step)) +
geom_line+
xlab("Five-Min Interval") +
ylab("Number of steps")
activityPattern <- ggplot(data = interval, aes(x = fives, y = avg.step)) +
geom_line()+
xlab("Five-Min Interval") +
ylab("Number of steps")
activityPattern
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwdith = 500)
steps
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 500)
steps
avg.step <- aggregate(steps ~ interval, data = raw.nNA, fun = mean)
avg.step <- aggregate(steps ~ interval, data = raw.noNA, fun = mean)
avg.step <- aggregate(steps ~ interval, data = raw.noNA, FUN = mean)
View(avg.step)
activityPattern <- ggplot(data = avg.step, aes(x = interval, y = steps)) +
geom_line()+
xlab("Five-Min Interval") +
ylab("Number of steps")
activityPattern
library(ggplot2)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
raw <- read.csv("./activity/activity.csv")
raw.noNA <- raw[complete.cases(raw), ]
#a histogram of the total number of steps taken each
daily <- data.frame()
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
}
daily.total <- data.frame(daily.sum)
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 500)
steps
#a time series plot (i.e. type = "l")
#of the 5-minute interval (x-axis) and
#the average number of steps taken, averaged across all days (y-axis)
avg.step <- aggregate(steps ~ interval, data = raw.noNA, FUN = mean)
activityPattern <- ggplot(data = avg.step, aes(x = interval, y = steps)) +
geom_line()+
xlab("Five-Min Interval") +
ylab("Number of steps")
activityPattern
countNA <- sum(is.na(raw$steps))
countNA
raw.fillNA <- impute(raw$steps, fun = median)
install.packages("Hmisc")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("MICE")
install.packages("mice")
raw.fillNA <- mice(raw)
library(mice)
raw.fillNA <- mice(raw)
raw.fillNA
raw.fillNA <- mice(raw$steps)
raw.fillNA <- complete(raw)
raw.fillNA <- mice(raw, meth = "logreg.boot")
raw.fillNA <- mice(raw, meth = "norm.predict")
raw.fillNA
raw.fillNA <- data.frame(raw.fillNA)
complete(raw.fillNA)
raw.fill <- complete(raw.fillNA)
View(raw.fill)
checkNA <- sum(is.na(raw.fill))
checkNA
raw.fillNA <- mice(raw, meth = "mean")
raw.fill <- complete(raw.fillNA)
checkNA <- sum(is.na(raw.fill))
checkNA
library(ggplot2)
library(mice)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
raw <- read.csv("./activity/activity.csv")
raw.noNA <- raw[complete.cases(raw), ]
#a histogram of the total number of steps taken each
daily <- data.frame()
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
}
daily.total <- data.frame(daily.sum)
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 500)
steps
#a time series plot (i.e. type = "l")
#of the 5-minute interval (x-axis) and
#the average number of steps taken, averaged across all days (y-axis)
avg.step <- aggregate(steps ~ interval, data = raw.noNA, FUN = mean)
activityPattern <- ggplot(data = avg.step, aes(x = interval, y = steps)) +
geom_line()+
xlab("Five-Min Interval") +
ylab("Number of steps")
activityPattern
countNA <- sum(is.na(raw$steps))
raw.fillNA <- mice(raw, meth = "norm.predict")
raw.fill <- complete(raw.fillNA)
checkNA <- sum(is.na(raw.fill))
daily <- data.frame()
for (i in 1:length(funcs)) {
temp <- tapply(raw.fill$steps, raw.fill$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
}
daily.total <- data.frame(daily.sum)
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 500)
steps
steps
library(ggplot2)
library(mice)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
raw <- read.csv("./activity/activity.csv")
raw.noNA <- raw[complete.cases(raw), ]
#a histogram of the total number of steps taken each
daily <- data.frame()
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
}
daily.total <- data.frame(daily.sum)
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 500)
steps
#a time series plot (i.e. type = "l")
#of the 5-minute interval (x-axis) and
#the average number of steps taken, averaged across all days (y-axis)
avg.step <- aggregate(steps ~ interval, data = raw.noNA, FUN = mean)
activityPattern <- ggplot(data = avg.step, aes(x = interval, y = steps)) +
geom_line()+
xlab("Five-Min Interval") +
ylab("Number of steps")
activityPattern
countNA <- sum(is.na(raw$steps))
raw.fillNA <- mice(raw, meth = "norm.predict")
raw.fill <- complete(raw.fillNA)
checkNA <- sum(is.na(raw.fill))
daily <- data.frame()
for (i in 1:length(funcs)) {
temp <- tapply(raw.fill$steps, raw.fill$date, funcs[i], na.rm = T)
temp <- assign(paste("daily2." , funcs[i], sep = ""), temp)
}
daily.total <- data.frame(daily.sum)
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 500)
steps
library(ggplot2)
library(mice)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
raw <- read.csv("./activity/activity.csv")
raw.noNA <- raw[complete.cases(raw), ]
#a histogram of the total number of steps taken each
daily <- data.frame()
funcs <-  c("mean", "sum", "median")
for (i in 1:length(funcs)) {
temp <- tapply(raw.noNA$steps, raw.noNA$date, funcs[i], na.rm = T)
temp <- assign(paste("daily." , funcs[i], sep = ""), temp)
}
daily.total <- data.frame(daily.sum)
steps <- ggplot(daily.total, aes(daily.sum)) +
geom_histogram(binwidth = 500)
steps
#a time series plot (i.e. type = "l")
#of the 5-minute interval (x-axis) and
#the average number of steps taken, averaged across all days (y-axis)
avg.step <- aggregate(steps ~ interval, data = raw.noNA, FUN = mean)
activityPattern <- ggplot(data = avg.step, aes(x = interval, y = steps)) +
geom_line()+
xlab("Five-Min Interval") +
ylab("Number of steps")
activityPattern
countNA <- sum(is.na(raw$steps))
raw.fillNA <- mice(raw, meth = "norm.predict")
raw.fill <- complete(raw.fillNA)
checkNA <- sum(is.na(raw.fill))
daily <- data.frame()
for (i in 1:length(funcs)) {
temp <- tapply(raw.fill$steps, raw.fill$date, funcs[i], na.rm = T)
temp <- assign(paste("daily2." , funcs[i], sep = ""), temp)
}
daily2.total <- data.frame(daily2.sum)
steps <- ggplot(daily.total, aes(daily2.sum)) +
geom_histogram(binwidth = 500)
steps
raw.fill$weekday <-  weekdays(raw.filL$date)
raw.fill$weekday <-  weekdays(raw.filL$date, abbreviate = FALSE)
raw.fill$weekday <-  weekdays(raw.fill$date, abbreviate = FALSE)
raw.fill$date <- date(raw.fill$date)
raw.fill$date <- as.Date(raw.fill$date)
raw.fill$weekday <-  weekdays(raw.fill$date, abbreviate = FALSE)
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = FALSE)
if(raw.fill$day == xor("SATURDAY", "SUNDAY")){
raw.fill$weekday <- "WEEKEND" } else
{ raw.fill$weekday = "WEEKDAY" }
if(raw.fill$day == "SATURDAY" || "SUNDAY"){
raw.fill$weekday <- "WEEKEND" } else
{ raw.fill$weekday = "WEEKDAY" }
if(raw.fill$day == "SATURDAY" || raw.fill$day == "SUNDAY"){
raw.fill$weekday <- "WEEKEND" } else
{ raw.fill$weekday = "WEEKDAY" }
View(raw.fill)
if(raw.fill$day == "Saturday" || raw.fill$day == "Sunday"){
raw.fill$weekday <- "WEEKEND" } else
{ raw.fill$weekday = "WEEKDAY" }
raw.fill$date <- as.Date(raw.fill$date)
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = FALSE)
if(raw.fill$day == "Saturday" || raw.fill$day == "Sunday"){
raw.fill$weekday <- "WEEKEND" } else
{ raw.fill$weekday = "WEEKDAY" }
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = FALSE)
if(raw.fill$day == "Saturday" || raw.fill$day == "Sunday"){
raw.fill$weekday = "WEEKEND" } else
{raw.fill$weekday = "WEEKDAY" }
raw.fill$date <- as.Date(raw.fill$date)
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = FALSE)
if(raw.fill$day == "Saturday" || raw.fill$day == "Sunday"){
raw.fill$weekday = "WEEKEND" } else
{raw.fill$weekday = "WEEKDAY" }
View(raw.fill)
if(raw.fill$day %in% c("Saturday", "Sunday")){
raw.fill$weekday <- "WEEKEND" } else
{raw.fill$weekday <- "WEEKDAY" }
if(raw.fill$day || c("Saturday", "Sunday")){
raw.fill$weekday <- "WEEKEND" } else
{raw.fill$weekday <- "WEEKDAY" }
if(raw.fill$day = c("Saturday", "Sunday")){
raw.fill$weekday <- "WEEKEND" } else
{raw.fill$weekday <- "WEEKDAY" }
if(raw.fill$day == c("Saturday", "Sunday")){
raw.fill$weekday <- "WEEKEND" } else
{raw.fill$weekday <- "WEEKDAY" }
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = TRUE)
raw.fill$date <- as.Date(raw.fill$date)
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = TRUE)
if(raw.fill$day == ("Sat" || "Sun")){
raw.fill$weekday <- "WEEKEND" } else
{raw.fill$weekday <- "WEEKDAY" }
for(i in 1:nrow(raw.fill)({}))
if(raw.fill$day[i] == "Sat" || raw.fill$day[i] == "Sun"){
raw.fill$weekday <- "WEEKEND" } else
{raw.fill$weekday <- "WEEKDAY" }
for(i in 1:nrow(raw.fill)){
if(raw.fill$day[i] == "Sat" || raw.fill$day[i] == "Sun"){
raw.fill$weekday <- "WEEKEND" } else
{raw.fill$weekday <- "WEEKDAY" }
}
for(i in 1:nrow(raw.fill)){
if(raw.fill$day[i] == "Sat" || raw.fill$day[i] == "Sun"){
raw.fill$weekday[i] <- "WEEKEND" } else
{raw.fill$weekday[i] <- "WEEKDAY" }
}
weekendWarrior <- ggplot(raw.fill, aes(x = interval, y = steps, fill = weekday)) +
geom_line()
weekendWarrior
weekendWarrior <- ggplot(raw.fill, aes(x = interval, y = steps, group = weekday)) +
geom_line()
weekendWarrior
weekendWarrior <- ggplot(raw.fill, aes(x = interval, y = steps, group = weekday, colour = weekday)) +
geom_line()
weekendWarrior
weekendWarrior <- ggplot(raw.fill, aes(x = as.Time(interval), y = steps, group = weekday, colour = weekday)) +
geom_line()
weekendWarrior
raw.filL$interval <- as.Date(raw.filL$interval)
weekendWarrior <- ggplot(raw.fill, aes(x = interval, y = steps, colour = weekday)) +
geom_line()
weekendWarrior
weekendWarrior <- ggplot(raw.fill,aes(x=interval, y=steps)) +
geom_line(color="violet") +
facet_wrap(~ weekday, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
weekendWarrior
weekendWarrior <- ggplot(raw.fill,aes(x=interval, y=mean(steps))) +
geom_line(color="violet") +
facet_wrap(~ weekday, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
weekendWarrior
weekend <- tapply(raw.fill$steps, interval, fun= mean)
weekend <- tapply(raw.fill$steps, raw.fill$interval, fun= mean)
avgWeek <- aggregate(steps ~ interval + weekday, raw.fill, mean)
View(avgWeek)
weekendWarrior <- ggplot(avgWeek,aes(x=interval, y=(steps))) +
geom_line(color="blue") +
facet_wrap(~ weekday, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
weekendWarrior
install.packages("knitr")
install.packages("knitr")
library(knitr)
install.packages('scales')
library(scales)
daily.total.mean <- mean(daily.total)
View(daily.total)
View(daily.total)
View(daily.total)
View(raw.noNA)
View(daily.total)
View(daily.total)
most<- which.max(avg.step$steps)
```{r moststeps}
View(avg.step)
View(avg.step)
View(avg.step)
most<- which.max(avg.step$steps)
most<- which.max(avg.step$steps)
most
most<- which.max(avg.step$steps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
most<- which.max(avg.step$steps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avg.step[mostSteps,'interval'])
most<- which.max(avg.step$steps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", avg.step[most,'interval'])
View(raw.fill)
raw.fill$date <- as.Date(raw.fill$date)
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = TRUE)
raw.filL$interval <- as.Date(raw.filL$interval)
for(i in 1:nrow(raw.fill)){
if(raw.fill$day[i] == "Sat" || raw.fill$day[i] == "Sun"){
raw.fill$weekday[i] <- "WEEKEND" } else
{raw.fill$weekday[i] <- "WEEKDAY" }
}
raw.fill$date <- as.Date(raw.fill$date)
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = TRUE)
raw.filL$interval <- as.Date(raw.fill$interval)
for(i in 1:nrow(raw.fill)){
if(raw.fill$day[i] == "Sat" || raw.fill$day[i] == "Sun"){
raw.fill$weekday[i] <- "WEEKEND" } else
{raw.fill$weekday[i] <- "WEEKDAY" }
}
raw.fill$date <- as.Date(raw.fill$date)
raw.fill$day <-   weekdays(raw.fill$date, abbreviate = TRUE)
for(i in 1:nrow(raw.fill)){
if(raw.fill$day[i] == "Sat" || raw.fill$day[i] == "Sun"){
raw.fill$weekday[i] <- "WEEKEND" } else
{raw.fill$weekday[i] <- "WEEKDAY" }
}
avgWeek <- aggregate(steps ~ interval + weekday, raw.fill, mean)
weekendWarrior <- ggplot(avgWeek,aes(x=interval, y=(steps))) +
geom_line(color="blue") +
facet_wrap(~ weekday, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
weekendWarrior
weekendWarrior <- ggplot(avgWeek,aes(x=interval, y=(steps))) +
geom_line(color="blue") +
facet_wrap(~ weekday, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
library(ggplot2)
weekendWarrior <- ggplot(avgWeek,aes(x=interval, y=(steps))) +
geom_line(color="blue") +
facet_wrap(~ weekday, nrow=2, ncol=1) +
labs(x="Interval", y="Number of steps") +
theme_bw()
weekendWarrior
